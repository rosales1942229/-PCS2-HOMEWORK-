class DNASequence(object):
    def __init__(self, sequence):
        self.sequence = sequence
        
    def countBases(self):
        count_dict = defaultdict(int)
        for base in self.sequence:
            count_dict[base] += 1
        return count_dict
        
    def transcribe(self):
        rna = self.sequence.replace('T','U')
        return rna

    def reverseComplement(self):
        watson_crick = {'A':'T', 'C':'G', 'G':'C', 'T':'A'}
        complement = ''
        for base in self.sequence:
            complement += watson_crick[base]
        rev_complement = complement[::-1]
        return rev_complement


raw_sequence ='GAGGTGTACAGATTCAAACAGATACCGATTTTAGTCTCCAAGGTCGACCTTCCATGATAATGGCCTTCCCGGGAGAGAGTCCGGCTATAAGAGAGGGGTCCTTTTGACTTGATACGCCCGCGTTACCTAATCTGCCCTACTTGGACTCCGCGAGCTAAGCTGAGACTCGAGCGAAAATCTTGCACGCGCCATACAGGATTTGCACTTGTGTTTTATCCGCCCTCGTATCGATACCATCGTAATGTAGCCACCCAAGCCACGATGCGATGTTAGTGTGTGGGCGTCATAACCCTGAACGAGAATCTCCTTCCCTATGACAACTCCAGTTTCTTCGTTCAGGCCTGCTTGGAATTCACCATTAGGTTTGAAGAACCCCTGGGCGGGACTCGTAGCTAAGATATGGGGAGTGCATGACCATATCGTTCCGATCTAGCGCACGCTCAGTACTACACTTAGGTGGTAGCAGGTTGGAGAGGTTAGCCGTTCACACTATGAAGATTACCTTGATTACACGCGACGGAGAGTTATGTGTCAACTTTGTTGACCATCAGCGATTGCTTGCAGGATGTAGGGCGAGGAGCTTGAGATTCCACTCTAGGAGCCGATCCGTTGAGCGTCGTAGCTAGATATTGTGAGCAGATAAGAGCTTATTTAGCACGTCAGGAATAGAACCATCCAGCTTTGCTTTGACCGAGCGGAGCGGTGTCACCTCCTGGGTCCCCTTCTACAAGTAGATTGCATTAAATACGCACAAACAGCCGGCCATGATCCGCATCGGGTGCACTAGTGGCTATTTAGGTGTGAGTCTTGTGTCCGTGATGGGGAAACATTTAGTCAGTACCACTCGTCTTTGGAAAGTGGAGGCTGACTACTGTCCGAGTTAATGCAGGGAAGGC'


my_DNASeq_object = DNASequence(raw_sequence)

my_rev_comp = my_DNASeq_object.reverseComplement()

print (my_rev_comp)
